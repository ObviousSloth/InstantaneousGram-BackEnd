# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# The ACR should be attached to the AKS cluster
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these
#    https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#
# 3. Choose the appropriate render engine for the bake step https://github.com/Azure/k8s-bake. The config below assumes Kompose.
#    Set your dockerComposeFile and kompose-version to suit your configuration.
#    - DOCKER_COMPOSE_FILE_PATH (the path where your Kompose deployment manifest is located)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and deploy an app to AKS with Kompose

on:
  push:
    branches: ["main", "Development"]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: "instantaneousgramcontainerreg"
  CONTAINER_NAME: "instantaneousgram"
  RESOURCE_GROUP: "InstantaneousGram"
  CLUSTER_NAME: "InstantKluster"
  DOCKER_COMPOSE_FILE_PATH: "./docker-compose.yml"

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: apigateway
            dockerfile: InstantaneousGram-ApiGateway/Dockerfile
            context: InstantaneousGram-ApiGateway
          - name: authentication
            dockerfile: InstantaneousGram-Authentication/Dockerfile
            context: InstantaneousGram-Authentication
          - name: contentmanagement
            dockerfile: InstantaneousGram-ContentManagement/Dockerfile
            context: InstantaneousGram-ContentManagement
          - name: likeandcomment
            dockerfile: InstantaneousGram-LikeAndComment/Dockerfile
            context: InstantaneousGram-LikeAndComment
          - name: imageandvideoprocessing
            dockerfile: InstantaneousGram-ImageAndVideoProcessing/Dockerfile
            context: InstantaneousGram-ImageAndVideoProcessing
            needs_env: true
          - name: userprofile
            dockerfile: InstantaneousGram-UserProfile/Dockerfile
            context: InstantaneousGram-UserProfile
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Create the shared appsettings files
      - name: Set up shared appsettings files
        run: |
          echo "${{ secrets.APPSETTINGS_JSON }}" > ${{ matrix.service.context }}/appsettings.json

      - name: Debug matrix
        run: | 
          echo "Service: ${{ matrix.service.name }}, Needs Env: ${{ matrix.service.needs_env }}"          
       # Create the .env file for the image processing service
      - name: Set up .env file for image processing
        if: ${{ matrix.service.needs_env }} 
        run: |
          echo "${{ secrets.CLOUDINARY_URL }}" > ${{ matrix.service.context }}/.env


      # Builds and pushes an image up to your Azure Container Registry
      - name: Build and push image to ACR
        run: |
          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/instantaneousgram-${{ matrix.service.name }}:latest --registry ${{ env.AZURE_CONTAINER_REGISTRY }} --file ${{ matrix.service.dockerfile }} ${{ matrix.service.context }}

      - name: Set outputs for deploy job
        run: |
            echo "service_name=${{ matrix.service.name }}" >> $GITHUB_OUTPUT
            echo "needs_env=${{ matrix.service.needs_env }}" >> $GITHUB_OUTPUT
                  
  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage]
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      - name: Debug outputs
        run: |
          echo "Service: ${{ needs.buildImage.outputs.service_name }}, Needs Env: ${{ needs.buildImage.outputs.needs_env }}"
        
      # Ensure the .env file exists before running kompose
      - name: Ensure .env file exists for image processing
        if: ${{ needs.buildImage.outputs.needs_env}}
        run: |
          echo "Ensuring .env file exists for image processing"
          mkdir -p InstantaneousGram-ImageAndVideoProcessing
          echo "${{ secrets.CLOUDINARY_URL }}" > InstantaneousGram-ImageAndVideoProcessing/.env


      # Runs Kompose to create manifest files
      - name: Bake deployment
        uses: azure/k8s-bake@v2
        with:
          renderEngine: "kompose"
          dockerComposeFile: ${{ env.DOCKER_COMPOSE_FILE_PATH }}
          kompose-version: "latest"
        id: bake

      # Deploys application based on manifest files from previous step
      - name: Deploy application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/instantaneousgram-apigateway:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/instantaneousgram-authentication:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/instantaneousgram-contentmanagement:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/instantaneousgram-likeandcomment:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/instantaneousgram-imageprocessing:${{ github.sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/instantaneousgram-userprofile:${{ github.sha }}
